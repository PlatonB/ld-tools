__version__ = 'V5.1'

def calc_ld(var_1_genotypes, var_2_genotypes):
        '''
        Вычисление значений LD (r2 и D') для
        двух биаллельных вариантов по генотипам.
        Функция запрашивает на вход лишь два
        списка или кортежа генотипов, что делает
        калькулятор легко встраиваемым в другие
        биоинформатические программы. Предполагается,
        что генотипы были ранее отобраны по
        принадлежности соответствующих сэмплов
        полу и популяциям. В принимаемых функцией
        массивах генотипы должны быть представлены
        исключительно в одиночном виде: вместо
        1|1, 1|0 - 1, 1, 1, 0. Генотип 0 говорит
        о том, что аллель у данного индивида в
        данной точке референсный, а 1 - что
        альтернативный. Для подаваемых функции
        генотипов обязателен числовой тип данных.
        '''
        
        #Гаплотип в данном случае - сочетание двух
        #генотипов, принадлежащих одной копии хромосомы
        #одного сэмпла, для двух вариантов. Получение всех
        #гаплотипов и определение их количества: оно равно
        #числу всех отдельных генотипов. Это значение
        #константно в пределах каждой таблицы 1000 Genomes.
        #Расчёт количества и частоты гаплотипов alt+alt.
        htypes = list(zip(var_1_genotypes, var_2_genotypes))
        htypes_quan = len(htypes)
        htype_alt_alt_quan = htypes.count((1, 1))
        htype_alt_alt_freq = htype_alt_alt_quan / htypes_quan
        
        #Вычисление количества и частоты
        #каждого из аллелей каждого варианта.
        var_1_alt_quan = var_1_genotypes.count(1)
        var_1_ref_quan = var_1_genotypes.count(0)
        var_2_alt_quan = var_2_genotypes.count(1)
        var_2_ref_quan = var_2_genotypes.count(0)
        var_1_alt_freq = var_1_alt_quan / htypes_quan
        var_1_ref_freq = var_1_ref_quan / htypes_quan
        var_2_alt_freq = var_2_alt_quan / htypes_quan
        var_2_ref_freq = var_2_ref_quan / htypes_quan
        
        #D - стандартное значение LD. Если оно равно
        #нулю, то это означает равновесие по сцеплению.
        #Неравенство нулю будет говорить о неравновесии
        #по сцеплению. D может быть от -0.25 до 0.25.
        d = htype_alt_alt_freq - var_1_alt_freq * var_2_alt_freq
        
        #D' - нормализованное значение LD.
        #Частота одного из аллелей в редких
        #случаях может быть равной нулю. Это
        #означает, что попался мономорфный вариант,
        #т.е. у которого все генотипы одинаковы:
        #только 1|1 или только 0|0. Расчёт D' в
        #этом случае невозможен из-за попадания
        #нуля в знаменатель. Поскольку None-значения
        #пока вызывают проблемы со стороны программы
        #ld_triangle, при обработке мономорфных
        #вариантов будет возвращён D', равный 0.
        if d >= 0:
                d_max = min(var_1_alt_freq * var_2_ref_freq,
                            var_1_ref_freq * var_2_alt_freq)
                try:
                        d_prime = d / d_max
                except ZeroDivisionError:
                        d_prime = 0
        else:
                d_min = max(-var_1_alt_freq * var_2_alt_freq,
                            -var_1_ref_freq * var_2_ref_freq)
                try:
                        d_prime = d / d_min
                except ZeroDivisionError:
                        d_prime = 0
                        
        #r2 - значение LD в виде квадрата
        #коэффициента корреляции Пирсона.
        #Если r2 = 0, то это полное равновесие
        #по сцеплению, если r2 = 1, то тогда
        #наблюдается полное неравновесие. Если
        #один из вариантов - мономорфный, то в
        #качестве значения r2 возвратится 0. Эта
        #ситуация подробно описана выше для D'.
        if d_prime != 0:
                r_square = (d ** 2) / (var_1_alt_freq * var_1_ref_freq *
                                       var_2_alt_freq * var_2_ref_freq)
        else:
                r_square = 0
                
        #Оба значения LD и частоты альтернативных
        #аллелей организуем в словарь.
        results = {'r_square': round(r_square, 4),
                   'd_prime': round(d_prime, 4),
                   'var_1_alt_freq': round(var_1_alt_freq, 4),
                   'var_2_alt_freq': round(var_2_alt_freq, 4)}
        
        return results
